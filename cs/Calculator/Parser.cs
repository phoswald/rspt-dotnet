//
// NOTE: This file has been generated by RSPT (the Really Simple Parser Tool).
//       Do not modify the contents of this file as it will be overritten!
//
using System;
using System.Collections.Generic;

namespace Parsers {

public partial class CalculatorParser {

    private char[] _input;

    public CalculatorParser() { }

    public bool Parse_ROOT(char[] input, out string output, out int pos) {
        _input = input;
        pos    = 0;
        output = default(string);
        return nt_ROOT(ref pos, ref output) && pos == _input.Length;
    }

    public bool Parse_EXPRESSION(char[] input, out double output, out int pos) {
        _input = input;
        pos    = 0;
        output = default(double);
        return nt_EXPRESSION(ref pos, ref output) && pos == _input.Length;
    }

    private bool nt_ROOT(ref int pos, ref string output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(ref pos1, "Version".ToCharArray())) {
                output = "Version 1.11 for C#/.NET";
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(ref pos1, "About".ToCharArray())) {
                output = "Copyright (C) 2010 Philip Oswald";
                pos = pos1;
                return true;
            }
        }
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_EXPRESSION(ref pos1, ref output1)) {
                output = output1.ToString();
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_EXPRESSION(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_EXPRESSION_SET(ref pos1, ref output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_EXPRESSION_SET(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            string output1 = default(string);
            int pos1 = pos0;
            if(nt_IDENT(ref pos1, ref output1)) {
                int pos2 = pos1;
                if(tc(ref pos2, '=')) {
                    double output3 = default(double);
                    int pos3 = pos2;
                    if(nt_EXPRESSION_SET(ref pos3, ref output3)) {
                        output = output3; _variables[output1] = output;
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_EXPRESSION_ADD(ref pos1, ref output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_IDENT(ref int pos, ref string output) {
        int pos0 = pos;
        if(true) {
            object output1 = default(object);
            int pos1 = pos0;
            if(nt_IDENTCHAR_1(ref pos1, ref output1)) {
                object output2 = default(object);
                int pos2 = pos1;
                if(nt_IDENTCHARS_N(ref pos2, ref output2)) {
                    output = new string(_input, pos0, pos2-pos0);
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    private bool nt_EXPRESSION_ADD(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_EXPRESSION_MUL(ref pos1, ref output1)) {
                int pos2 = pos1;
                if(nt_OP_ADD(ref pos2, ref output1)) {
                    output = output1;
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    private bool nt_EXPRESSION_MUL(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_EXPRESSION_BRA(ref pos1, ref output1)) {
                int pos2 = pos1;
                if(nt_OP_MUL(ref pos2, ref output1)) {
                    output = output1;
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    private bool nt_OP_ADD(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '+')) {
                double output2 = default(double);
                int pos2 = pos1;
                if(nt_EXPRESSION_MUL(ref pos2, ref output2)) {
                    output += output2;
                    int pos3 = pos2;
                    if(nt_OP_ADD(ref pos3, ref output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '-')) {
                double output2 = default(double);
                int pos2 = pos1;
                if(nt_EXPRESSION_MUL(ref pos2, ref output2)) {
                    output -= output2;
                    int pos3 = pos2;
                    if(nt_OP_ADD(ref pos3, ref output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    private bool nt_EXPRESSION_BRA(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '(')) {
                double output2 = default(double);
                int pos2 = pos1;
                if(nt_EXPRESSION(ref pos2, ref output2)) {
                    int pos3 = pos2;
                    if(tc(ref pos3, ')')) {
                        output = output2;
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_VALUE(ref pos1, ref output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_OP_MUL(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '*')) {
                double output2 = default(double);
                int pos2 = pos1;
                if(nt_EXPRESSION_BRA(ref pos2, ref output2)) {
                    output *= output2;
                    int pos3 = pos2;
                    if(nt_OP_MUL(ref pos3, ref output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '/')) {
                double output2 = default(double);
                int pos2 = pos1;
                if(nt_EXPRESSION_BRA(ref pos2, ref output2)) {
                    output /= output2;
                    int pos3 = pos2;
                    if(nt_OP_MUL(ref pos3, ref output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    private bool nt_VALUE(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            double output1 = default(double);
            int pos1 = pos0;
            if(nt_SYMBOL(ref pos1, ref output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            string output1 = default(string);
            int pos1 = pos0;
            if(nt_CONST(ref pos1, ref output1)) {
                output = double.Parse(output1);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_SYMBOL(ref int pos, ref double output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(ref pos1, "pi".ToCharArray())) {
                output = Math.PI;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, 'e')) {
                output = Math.E;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            string output1 = default(string);
            int pos1 = pos0;
            if(nt_IDENT(ref pos1, ref output1)) {
                _variables.TryGetValue(output1, out output);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_CONST(ref int pos, ref string output) {
        int pos0 = pos;
        if(true) {
            object output1 = default(object);
            int pos1 = pos0;
            if(nt_DIGIT(ref pos1, ref output1)) {
                object output2 = default(object);
                int pos2 = pos1;
                if(nt_DIGITS(ref pos2, ref output2)) {
                    output = new string(_input, pos0, pos2-pos0);
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    private bool nt_IDENTCHAR_1(ref int pos, ref object output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_IDENTCHARS_N(ref int pos, ref object output) {
        int pos0 = pos;
        if(true) {
            object output1 = default(object);
            int pos1 = pos0;
            if(nt_IDENTCHAR_N(ref pos1, ref output1)) {
                object output2 = default(object);
                int pos2 = pos1;
                if(nt_IDENTCHARS_N(ref pos2, ref output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    private bool nt_IDENTCHAR_N(ref int pos, ref object output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(ref pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, '0', '9')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_DIGIT(ref int pos, ref object output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(ref pos1, '0', '9')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    private bool nt_DIGITS(ref int pos, ref object output) {
        int pos0 = pos;
        if(true) {
            object output1 = default(object);
            int pos1 = pos0;
            if(nt_DIGIT(ref pos1, ref output1)) {
                object output2 = default(object);
                int pos2 = pos1;
                if(nt_DIGITS(ref pos2, ref output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    private bool ts(ref int pos, char[] s) {
        foreach(char c in s) {
            if(pos >= _input.Length || _input[pos] != c) return false;
            pos++;
        }
        return true;
    }

    private bool tc(ref int pos, char c) {
        if(pos >= _input.Length || _input[pos] != c) return false;
        pos++;
        return true;
    }

    private bool trange(ref int pos, char c1, char c2) {
        if(pos >= _input.Length || _input[pos] < c1 || _input[pos] > c2) return false;
        pos++;
        return true;
    }

    private static readonly Dictionary<string,double> _variables = new Dictionary<string,double>();
}
}
