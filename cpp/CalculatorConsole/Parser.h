//
// NOTE: This file has been generated by RSPT (the Really Simple Parser Tool).
//       Do not modify the contents of this file as it will be overritten!
//
#pragma once;
#include <Math.h>

namespace Parsers {

class CCalculatorParser
{
private:
    const TCHAR* _input;
    int _size;

public:
    CCalculatorParser() : _input(NULL), _size(0) { }

    bool Parse_ROOT(const TCHAR* input, int size, CString& output, int& pos) {
        _input = input;
        _size  = size;
        pos    = 0;
        /*output = default(CString);*/
        return nt_ROOT(pos, output) && pos == _size;
    }

    bool Parse_EXPRESSION(const TCHAR* input, int size, double& output, int& pos) {
        _input = input;
        _size  = size;
        pos    = 0;
        /*output = default(double);*/
        return nt_EXPRESSION(pos, output) && pos == _size;
    }

private:
    bool nt_ROOT(int& pos, CString& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("Version"), 7)) {
                output = _T("Version 1.11 for C++/MFC");
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("About"), 5)) {
                output = _T("Copyright (C) 2010 Philip Oswald");
                pos = pos1;
                return true;
            }
        }
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_EXPRESSION(pos1, output1)) {
                output.Format(_T("%f"), output1);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_EXPRESSION(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_EXPRESSION_SET(pos1, output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_EXPRESSION_SET(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            CString output1 /*= default(CString)*/;
            int pos1 = pos0;
            if(nt_IDENT(pos1, output1)) {
                int pos2 = pos1;
                if(tc(pos2, '=')) {
                    double output3 /*= default(double)*/;
                    int pos3 = pos2;
                    if(nt_EXPRESSION_SET(pos3, output3)) {
                        output = output3; _variables.Put(output1, output);
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_EXPRESSION_ADD(pos1, output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_IDENT(int& pos, CString& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_IDENTCHAR_1(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_IDENTCHARS_N(pos2, output2)) {
                    output = CString(_input+pos0, pos2-pos0);
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_EXPRESSION_ADD(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_EXPRESSION_MUL(pos1, output1)) {
                int pos2 = pos1;
                if(nt_OP_ADD(pos2, output1)) {
                    output = output1;
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_EXPRESSION_MUL(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_EXPRESSION_BRA(pos1, output1)) {
                int pos2 = pos1;
                if(nt_OP_MUL(pos2, output1)) {
                    output = output1;
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_OP_ADD(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '+')) {
                double output2 /*= default(double)*/;
                int pos2 = pos1;
                if(nt_EXPRESSION_MUL(pos2, output2)) {
                    output += output2;
                    int pos3 = pos2;
                    if(nt_OP_ADD(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '-')) {
                double output2 /*= default(double)*/;
                int pos2 = pos1;
                if(nt_EXPRESSION_MUL(pos2, output2)) {
                    output -= output2;
                    int pos3 = pos2;
                    if(nt_OP_ADD(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_EXPRESSION_BRA(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                double output2 /*= default(double)*/;
                int pos2 = pos1;
                if(nt_EXPRESSION(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, ')')) {
                        output = output2;
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_VALUE(pos1, output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_OP_MUL(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '*')) {
                double output2 /*= default(double)*/;
                int pos2 = pos1;
                if(nt_EXPRESSION_BRA(pos2, output2)) {
                    output *= output2;
                    int pos3 = pos2;
                    if(nt_OP_MUL(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '/')) {
                double output2 /*= default(double)*/;
                int pos2 = pos1;
                if(nt_EXPRESSION_BRA(pos2, output2)) {
                    output /= output2;
                    int pos3 = pos2;
                    if(nt_OP_MUL(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_VALUE(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            double output1 /*= default(double)*/;
            int pos1 = pos0;
            if(nt_SYMBOL(pos1, output1)) {
                output = output1;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            CString output1 /*= default(CString)*/;
            int pos1 = pos0;
            if(nt_CONST(pos1, output1)) {
                output = _tstof(output1);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SYMBOL(int& pos, double& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("pi"), 2)) {
                output = 3.14;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, 'e')) {
                output = 2.7;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            CString output1 /*= default(CString)*/;
            int pos1 = pos0;
            if(nt_IDENT(pos1, output1)) {
                _variables.Get(output1, output);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_CONST(int& pos, CString& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_DIGIT(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_DIGITS(pos2, output2)) {
                    output = CString(_input+pos0, pos2-pos0);
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_IDENTCHAR_1(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_IDENTCHARS_N(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_IDENTCHAR_N(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_IDENTCHARS_N(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_IDENTCHAR_N(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, '0', '9')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_DIGIT(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, '0', '9')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_DIGITS(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_DIGIT(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_DIGITS(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool ts(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos >= _size || _input[pos] != s[i]) return false;
            pos++;
        }
        return true;
    }

    bool tc(int& pos, TCHAR c) {
        if(pos >= _size || _input[pos] != c) return false;
        pos++;
        return true;
    }

    bool trange(int& pos, TCHAR c1, TCHAR c2) {
        if(pos >= _size || _input[pos] < c1 || _input[pos] > c2) return false;
        pos++;
        return true;
    }

    TIcbHashtable<CString,double> _variables;
};
}
