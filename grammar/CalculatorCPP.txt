### Code Generator Settings ###
# Using grammar instructions, you can specify:
# - the C++ or C# namespace and class for your parser
# - a list of C++ include or C# using directives your source code needs
# - a list of C++ or C# source code fragments to be included into the parser class

<include:<Math.h>>
<namespace:Parsers>
<class:CCalculatorParser>

{TIcbHashtable<CString,double> _variables;} # TODO: sollte statisch sein

### Root Symbols ###
# The root symbols are those symbols that are externally visible.
# They must be introduced with the instruction <export>.

<export> ROOT : CString = 
    'Version'  {output = _T("Version 1.11 for C++/MFC")}         |
    'About'    {output = _T("Copyright (C) 2010 Philip Oswald")} |
    EXPRESSION {output.Format(_T("%f"), output1)} ;
    
<export> EXPRESSION : double = EXPRESSION_SET {output = output1} ;

### Assignment Operator ###
# The assignment operator is defined using a simple right recursion. 
# Therefore, it associates from right to left (which is conistent to C/C++).

EXPRESSION_SET : double =
    IDENT '=' EXPRESSION_SET {output = output3; _variables.Put(output1, output)} |
    EXPRESSION_ADD           {output = output1} ;

### Additive Operators ###
# These operators have equal precedence and associate from left to right.
# Since left recursion is not allowed in LL grammars, defining a left-associative operator 
# is a little tricky. A way around this is to pass the output of the left-hand side of
# an expression to the right-hand side of the expression. This can be accomplished using
# the <to:output> notation in the grammar.
                    
EXPRESSION_ADD : double = 
    EXPRESSION_MUL <to:output1> OP_ADD {output = output1} ;
    
OP_ADD : double = 
    '+' EXPRESSION_MUL {output += output2} <to:output> OP_ADD |  
    '-' EXPRESSION_MUL {output -= output2} <to:output> OP_ADD | ;
                                                         
### Multiplicative Operators ###
# These operators have equal precedence and associate from left to right

EXPRESSION_MUL : double = 
    EXPRESSION_BRA <to:output1> OP_MUL {output = output1} ; 
     
OP_MUL : double = 
    '*' EXPRESSION_BRA {output *= output2} <to:output> OP_MUL |  
    '/' EXPRESSION_BRA {output /= output2} <to:output> OP_MUL | ;
     
### Brackets ###

EXPRESSION_BRA : double = 
    '(' EXPRESSION ')' {output = output2} |
    VALUE              {output = output1} ;

### Values ###

VALUE : double = SYMBOL {output = output1} |
                 CONST  {output = _tstof(output1)} ;

SYMBOL : double = 'pi'  {output = 3.14} |
                  'e'   {output = 2.7}  |
                  IDENT {_variables.Get(output1, output)} ;
                  
IDENT : CString = IDENTCHAR_1 IDENTCHARS_N {output = CString(_input+pos0, pos2-pos0)} ;
IDENTCHARS_N = IDENTCHAR_N IDENTCHARS_N | ;
IDENTCHAR_1  = <range> 'az' | <range> 'AZ' | '_' ;
IDENTCHAR_N  = <range> 'az' | <range> 'AZ' | '_' | <range> '09' ;

CONST  : CString = DIGIT DIGITS {output = CString(_input+pos0, pos2-pos0)} ;
DIGITS : void*   = DIGIT DIGITS | ;
        
DIGIT = <range> '09' ;